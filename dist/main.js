(()=>{"use strict";var e={673:(e,t,r)=>{r.r(t)},934:(e,t,r)=>{r.r(t)},787:(e,t,r)=>{r.r(t)},331:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.globalStore=void 0,t.globalStore=new class{constructor(){this.store=[]}addData(e){this.store=e}getStore(){return this.store}clearStore(){this.store=[]}}},299:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updateRepo=t.repositories=void 0;const o=r(331),n=r(204),a=r(929);r(673),t.repositories=(0,n.createElement)(null,"div","repositories"),t.updateRepo=()=>{t.repositories.innerHTML="",o.globalStore.getStore().forEach((e=>{const r=(0,a.createRepository)(e);t.repositories.append(r)}))},(0,t.updateRepo)()},929:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRepository=void 0;const o=r(204);r(673),t.createRepository=e=>{const t=(0,o.createElement)(null,"div","repository"),r=((0,o.createElement)(t,"span","repository__tex-bold","Название: "),(0,o.createElement)(t,"a","repository__link",e.name));r.href=e.html_url,r.setAttribute("target","_blank");const n=(0,o.createElement)(t,"div","repository__block");(0,o.createElement)(n,"span","repository__tex-bold","Владелец: "),(0,o.createElement)(n,"img","repository__img").src=e.owner.avatar_url,(0,o.createElement)(n,"span","repository__text",e.owner.login);const a=(0,o.createElement)(t,"div","repository__block");return(0,o.createElement)(a,"span","repository__tex-bold","Описание: "),(0,o.createElement)(a,"span","repository__text",e.description),(0,o.createElement)(t,"span","repository__tex-bold","Приватность: "),(0,o.createElement)(t,"span","repository__text",e.private?"приватный":"публичный"),t}},512:function(e,t,r){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(n,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function s(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,s)}c((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.searchBlock=void 0;const n=r(331),a=r(204),i=r(299);r(934);t.searchBlock=(0,a.createElement)(null,"div","search");const s=(0,a.createElement)(t.searchBlock,"form","search__form"),c=(0,a.createElement)(s,"input","search__input"),l=(0,a.createElement)(s,"button","search__btn");l.textContent="найти",l.disabled=!0;const d=(0,a.createElement)(s,"p","error"),p=(0,a.createElement)(s,"p","search__text");c.addEventListener("input",(()=>{!function(e,t){p.innerText="";const r=function(e){const t=e.trim();return!(!t||t.length<3)}(e.value);t.hidden=r,t.innerText="Недостаточно символов.",r?e.classList.remove("invalid"):e.classList.add("invalid"),l.disabled=!r}(c,d)})),s.addEventListener("submit",(e=>function(e,t){return o(this,void 0,void 0,(function*(){p.innerText="",e.preventDefault(),n.globalStore.clearStore(),(0,i.updateRepo)();try{p.innerText="Загрузка...";const e=yield fetch(`https://api.github.com/search/repositories?q=${encodeURIComponent(t)}&page=1&per_page=10`);if(!e.ok)throw new Error("Что-то пошло не так, попробуйте снова...");{const t=yield e.json();if(0===t.total_count)return p.innerText="Ничего не найдено",void s.reset();n.globalStore.addData(t.items),(0,i.updateRepo)(),p.innerText="",s.reset()}}catch(e){e instanceof Error&&(d.innerText=e.message)}}))}(e,c.value)))},204:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createElement=void 0,t.createElement=(e,t="div",r="",o="")=>{const n=document.createElement(t);return n.classList.add(r),n.textContent=o,e&&e.append(n),n}}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var a=t[o]={exports:{}};return e[o].call(a.exports,a,a.exports,r),a.exports}r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e=r(512),t=r(299),o=r(204);r(787),window.addEventListener("DOMContentLoaded",(()=>{const r=document.body,n=(0,o.createElement)(r,"div","app"),a=(0,o.createElement)(n,"main","main");a.append(e.searchBlock,t.repositories),n.append(a)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,